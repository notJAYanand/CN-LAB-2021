#define CL_PORT 8080
#define SERV_PORT 9090

int main(int argc, char **argv) {
    int client number;
    client_number = (*argv[1]) - 48;



struct sockaddr_in servaddr, cliaddr;
if ( (sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0 ) {
		perror("socket creation failed");
		exit(EXIT_FAILURE);
}
memset(&servaddr, 0, sizeof(servaddr));
memset(&cliaddr, 0, sizeof(cliaddr));

// Filling own information
cliaddr.sin_family = AF_INET; // IPv4
cliaddr.sin_addr.s_addr = INADDR_ANY;
cliaddr.sin_port = htons(CL_PORT + client_number);

// Bind the socket with the server address
if ( bind(sockfd, (const struct sockaddr *)&cliaddr,
			sizeof(cliaddr)) < 0 )
{
    perror("bind failed");
	exit(EXIT_FAILURE);
}

// Filling own information
servaddr.sin_family = AF_INET; // IPv4
servaddr.sin_addr.s_addr = INADDR_ANY;
servaddr.sin_port = htons(SERV_PORT);


int len, n, from, to, from_message;

while(1) {

	scanf whether you want to be in send mode or recv mode?

	if (send mode) {
		scanf a message like 01Hi

    	// send to server
    	len = sizeof(servaddr);
    	sendto(sockfd, (const char *)buffer, strlen(buffer),
		0, (const struct sockaddr *) &servaddr,
			len);
	}

	if (recv mode) {
		len = sizeof(servaddr); //len is value/resuslt
		n = recvfrom(sockfd, (char *)buffer, MAXLINE,
				0, ( struct sockaddr *) &servaddr,
				&len);
		buffer[n] = '\0';

    
    	from_message = buffer[0] - 48;
    	message = 0,1,2,len - 1;
    	print message from from_message;
	}

    

	
}



}